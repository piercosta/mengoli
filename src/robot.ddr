RobotSystem mengoli


Event endpicture  : endpicture    //from robot to controller
Event endmove     : endmove       //from a robot move
Dispatch blink    : blink(X)      //from robot to led

Event start : start    //from robot GUI;  X=robotgui(CMD) CMD=s(low)
Event stop : stop
Event takepicture : takepicture
Event obstacle : obstacle
Event alarm : alarm

Context  ctxRobot  ip [ host="localhost"  port=8070 ]     -httpserver

EventHandler evh for  endmove , obstacle -print ; 

QActor led context ctxRobot {
	Plan init normal
        println("Led is starting");
        actorOp initLed(1);
        switchToPlan waiting
        
    Plan waiting
        receiveMsg time(999999999);
        onMsg blink : blink(on) -> switchToPlan blinking
        
    Plan blinking
        actorOp turnOn("");
        delay time(500);
        actorOp turnOff("");
        receiveMsg time(500);
        onMsg blink : blink(off) -> switchToPlan waiting;
        repeatPlan  
}

QActor obstaclesonar context ctxRobot {
		Plan init normal
			switchToPlan checkObstacle
		
		Plan checkObstacle
			println("checking");
			delay time (3000);
			println("emit obstacle");
			emit obstacle : obstacle;
			repeatPlan
}

Robot nano2 QActor robot context ctxRobot  {
	 	
 	Plan init normal                                      
		demo loadTheory("./worldTheory.pl") ;
		[ ?? goalResult(R)]  println(goalResult(R)) ;   
		switchToPlan waitForStart
	
	Plan waitForStart
		println("waiting for start");         
		sense time(600000) start  -> continue ;  
   		[ !? tout(X,Y)] println(tout(X,Y)) ;      
  		[ ?? tout(600000,Y)] switchToPlan takePicture ;   
  		printCurrentEvent ;
		onEvent  start : start -> switchToPlan running react event takepicture -> takePicture or 
															 event stop -> stopTheRobot or 
															 event obstacle -> stopTheRobot;
		repeatPlan
			
	Plan stopTheRobot    
		println("Stop the robot" )   ; 
		robotStop speed(10) time(0)	;
		switchToPlan waitForStart
		
	
		
	Plan handleAlarm resumeLastPlan     
		println("handleAlarm" )
	
		
	Plan running resumeLastPlan
		println("running") ;
		robotForward   speed(70)   time(10000) react event alarm -> takePicture or event obstacle -> stopTheRobot

	Plan takePicture resumeLastPlan
		println("blink(on)");
		forward led -m blink : blink(on);
		robotLeft   speed(70)   time(600) ;
		println("picture") ;
		delay time(1000) ;
		robotRight speed(70) time(650);
		forward led -m blink : blink(off);
		println("blink(off)");
		emit  endpicture : endpicture
	
	Plan prologFailure resumeLastPlan            
		println("Prolog goal FAILURE" )
		
}