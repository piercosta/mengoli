/* Generated by AN DISI Unibo */ 
/*
This code is generated only ONCE
 */
package it.unibo.sonarobstacle;
import java.io.BufferedReader;

import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.QActorContext;

public class Sonarobstacle extends AbstractSonarobstacle { 
	public Sonarobstacle(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
		super(actorId, myCtx, outEnvView);
	}

	boolean tryParseInt(String value) {  
		try {  
			Integer.parseInt(value);  
			return true;  
		} catch (NumberFormatException e) {  
			return false;  
		}  
	}

	protected BufferedReader readerC;
	protected String distance = ""; //d(  distance  )
	protected int counter = 1;
	public void startSonarC(){
		try {
			//Execute a C program that generates the sonar values
			Process p = Runtime.getRuntime().exec("sudo ./SonarAlone");
			readerC   = new BufferedReader(new java.io.InputStreamReader(p.getInputStream()));
			println("Process in C STARTED "  +  readerC);
		} catch (Exception e) {
			e.printStackTrace();
		}		
	}	
	public String getRobotSonarData(){
		try {
			String inpS = readerC.readLine();
			if (inpS != null)	{
				if (tryParseInt(inpS)){
					if (Integer.parseInt(inpS) <= 30)	{
						//println(">>>>>>>>> obstacle: "+inpS);
						inpS = "obstacle";
					}
				} else {
					System.out.println("Parse int false: " + inpS );
				}
					

			} else {
				inpS = "100";
			}
			return inpS;
		} catch (Exception e) {
			e.printStackTrace();
			return "ERROR"; 
		}
	}
}
