System mengoli

Event start : start    //from robot GUI;  X=robotgui(CMD) CMD=s(low)
Event stop : stop
Event takepicture : takepicture
Event obstacle : obstacle

Event obstacle    : p( Distance, Angle  )  
Dispatch polar    : p( Distance, Angle  )    

Event sonar : p( Distance, SID )
Event sonarToGui : p( Distance, SID )    
Event numOfSonars : numOfSonars( N )

Dispatch startRadarGui : startRadarGui(p( Distance, SID ))
Dispatch stopRadarGui : stopRadarGui

//Context  ctxRadarGui  ip [ host="localhost"  port=8033 ]

Context  ctxControl  ip [ host="localhost"  port=8070 ]

EventHandler evh_control for numOfSonars, sonar -print {
	memo currentEvent for logic_controller
};

Context ctxSonar	ip [ host="localhost"  port=8133 ]


QActor logic_controller context ctxControl {
	
	
	Plan init normal
			println("control init");
			demo loadTheory("./extendedWorldTheory.pl") onFailSwitchTo prologFailure;                                     
			//switchToPlan test;
			switchToPlan waitForNumSonars
	
	Plan waitForNumSonars
			println("waiting for num   sensors") ;
			sense time(600000) numOfSonars  -> continue ;
			[ !? msg(E,'event',S,none,numOfSonars(N),F) ] println(numOfSonars(N));
			[ ?? msg(E,'event',S,none,numOfSonars(N),F) ] demo assert(numofsonars(N)); // save number of sonars
			switchToPlan receiveData
	
	Plan receiveData
			[ ?? msg(E,'event',S,none,p(Distance, SID),N) ] demo assert(tempSonar(Distance, SID)); 
        	[ !? tempSonar(Distance, SID) ] demo retract(sonar(_, SID));
        	[ !? tempSonar(Distance, SID) ] println(tempSonar(Distance, SID)); //stampa
        	[ !? tempSonar(Distance, SID) ] demo assert(sonar(Distance, SID));
        	[ !? tempSonar(Distance, SID) ] demo retract(lastsonarid(_));
        	[ ?? tempSonar(Distance, SID) ] demo assert(lastsonarid(SID));
        	switchToPlan evaluateData;
        	repeatPlan 2
	
	Plan evaluateData resumeLastPlan
			[ !? lastdetectedsonar(N) ] println (lastdetected(N));
			[ !? checkdetected ] switchToPlan sendTakePicture;
			//switchToPlan updateRadarGui
			[ !? checkexpression ] switchToPlan alarm
			
	Plan alarm
			println("alarm");
			sound time(1500) file("./audio/doh.wav");
			emit stop : stop
			
	Plan prologFailure
			println("prolog failure")	
	
	Plan sendStart resumeLastPlan
			delay time(5000);
			emit start : start
	
			
	Plan test resumeLastPlan
//			switchToPlan sendStart;
//			delay time(5000);
//			switchToPlan sendTakePicture;
//			delay time(5000);
//			switchToPlan sendStop
			delay time(5000);
			println("testing");
			switchToPlan updateRadarGui;
			delay time(5000);
			switchToPlan alarm

			
	Plan sendStop resumeLastPlan
			emit stop : stop
			
	Plan sendTakePicture resumeLastPlan
			println("send take picture");
			emit takepicture : takepicture;
			switchToPlan updateRadarGui
			
	Plan updateRadarGui resumeLastPlan //tell to the gui_controller to start sending to the radar always the same p(Distance, SID)
			demo assert(sonar (0, 0));
			//[ !? sonar( Distance, SID) ] forward gui_controller -m startRadarGui : startRadarGui(p( Distance, SID ))
			[ !? sonar( Distance, SID) ] emit  sonarToGui : p( Distance, SID )
		
}

QActor gui_controller context ctxControl {
	
	Plan init normal
			println("gui_controller init");
			switchToPlan waitForSonarData
	
	Plan waitForSonarData
			println("waiting sonar data");
			receiveMsg time(600000);
			println("received");
			onMsg startRadarGui : startRadarGui(p(Distance,SID))  -> demo assert(guisonarpoint(Distance,SID));
			switchToPlan updateLoop
	
	Plan updateLoop
			[ !? guisonarpoint(Distance,SID) ]  emit  sonarToGui : p( Distance, SID );
			receiveMsg time(500);
			onMsg stopRadarGui : stopRadarGui -> switchToPlan endLoop else repeatPlan
			
	
	Plan endLoop
			println("end loop");
			demo retract(guisonarpoint(_,_));
			switchToPlan waitForSonarData
}