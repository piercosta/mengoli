System mengoli

Event start : start    					//start the robot
Event stop : stop						//stop the robot
Event hello : hello					    

Event startControl : startControl	//Gui to Control
Event stopControl : stopControl			//Gui to Control

Event takepicture : takepicture			//tell the robot to turn take a picture and turn
Event takepicturedone : takepicturedone //the robot tells to the control that the picture is done 
Event obstacle : obstacle(X)				//the robot finds an obstacle

Event sonar : p( Distance, SID )       	// sonar data from sonar to control
Event sonarToGui : p( Distance, SID )  	// sonar data from control to radar  
Event numOfSonars : numOfSonars( N )	// num of sonars from sonar to control	


//Context ctxRadar ip [ host="localhost"  port=8033 ] 
 
//Context  ctxSensorEmitter  ip [ host="localhost"  port=8133 ]

//Context ctxConsole ip [ host="localhost" port=8039 ]

Context ctxControl  ip [ host="192.168.43.238"  port=8070 ] -g cyan 
 
EventHandler evh_control for numOfSonars, sonar, start, stop, obstacle, stopControl, startControl { 
	 memo currentEvent for logic_controller   
}; 

QActor logic_controller context ctxControl { 
	
	Plan init normal
			println("control init");                                     
			//switchToPlan test;
			switchToPlan waitForNumSonars
		
	
	Plan waitForNumSonars			
			println("waiting for num sonars") ;
			sense time(600000) numOfSonars  -> continue ;
			[ !? msg(E,'event',S,none,numOfSonars(N),F) ] println(numOfSonars(N));
			[ ?? msg(E,'event',S,none,numOfSonars(N),F) ] actorOp setNumOfSonars(N);
			switchToPlan waitForConsoleStart
			
	Plan waitForConsoleStart
			println("wait for startControl");
			sense time(600000) startControl  -> continue ;
			demo retractall(msg(E,'event',S,none,p(Distance, SID),N));
			demo retractall(msg(E,'event',S,none,obstacle,N));
			switchToPlan robotRunning
			
	Plan robotRunning resumeLastPlan
			println("running");
			switchToPlan sendStart;
			println("receive data");
			switchToPlan receiveData
			
	Plan receiveData
			[ ?? msg(E,'event',S,none,p(Distance, SID),N) ] actorOp setSonar(Distance, SID) react event stopControl -> sendStop;
        	[ ?? msg(E,'event',S,none,obstacle,N)] switchToPlan obstacleFound;
        	[ ?? msg(E,'event',S,none,stopControl,N)] switchToPlan sendStop;			//check obstacle
        	switchToPlan evaluateData;
        	repeatPlan
	
	Plan evaluateData resumeLastPlan
			actorOp isRobotDetected react event stopControl -> sendStop;
			[ ?? actorOpDone (OP,'true') ] switchToPlan sendTakePicture;
			actorOp isExpressionTrue react event stopControl -> sendStop;
			[ ?? actorOpDone (OP,'true') ] switchToPlan alarm
			
	Plan alarm
			println("alarm"); 
			sound time(1500) file("./audio/doh.wav");
			switchToPlan sendStop
	
	Plan sendStart resumeLastPlan
			println("send start");
			emit start : start 
 
	Plan obstacleFound
			println("obstacle found");
			actorOp reset;
			switchToPlan waitForConsoleStart
			
	Plan sendStop resumeLastPlan
			println("send stop");
			emit stop : stop;
			actorOp reset;
			switchToPlan waitForConsoleStart
			
	Plan sendTakePicture resumeLastPlan
			println("send take picture");
			emit takepicture : takepicture;
			switchToPlan waitPictureDone
	
	Plan waitPictureDone resumeLastPlan
			println("waiting picture done");
			sense time(600000) takepicturedone  -> continue ;
			println("pic done");
			actorOp setRadarPointToZero	
}