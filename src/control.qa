System mengoli

Event start : start    //from robot GUI;  X=robotgui(CMD) CMD=s(low)
Event stop : stop
Event takepicture : takepicture
Event obstacle : obstacle

Event obstacle    : p( Distance, Angle  )  
Dispatch polar    : p( Distance, Angle  )    

Event sonar : p( Distance, SID )
Event sonarToGui : p( Distance, SID )    
Event numOfSonars : numOfSonars( N )

Dispatch startRadarGui : startRadarGui(p( Distance, SID ))

Context  ctxControl  ip [ host="localhost"  port=8070 ]

QActor logic_controller context ctxControl {
	
	
	Plan init normal
			println("filter init");
			demo loadTheory("./extendedWorldTheory.pl") onFailSwitchTo prologFailure;                                     
			switchToPlan waitForNumSonars
	
	Plan waitForNumSonars
			println("waiting for sensors") ;
			sense time(600000) numOfSonars  -> continue ;
			[ !? msg(E,'event',S,none,numOfSonars(N),F) ] println(numOfSonars(N));
			[ ?? msg(E,'event',S,none,numOfSonars(N),F) ] demo assert(numofsonars(N)); // save number of sonars
			switchToPlan receiveData
	
	Plan receiveData
			[ ?? msg(E,'event',S,none,p(Distance, SID),N) ] demo assert(tempSonar(Distance, SID)); 
        	[ !? tempSonar(Distance, SID) ] demo retract(sonar(_, SID));
        	[ !? tempSonar(Distance, SID) ] demo assert(sonar(Distance, SID));
        	[ !? tempSonar(Distance, SID) ] demo retract(lastsonarid(_));
        	[ ?? tempSonar(Distance, SID) ] demo assert(lastsonarid(SID));
        	switchToPlan evaluateData
	
	Plan evaluateData
			println("evaluate data");
			[ !? checkdetected ] switchToPlan sendTakePicture;
			//switchToPlan updateRadarGui
			[ !? checkexpression ] switchToPlan alarm;
			repeatPlan
			
	Plan alarm
			println("stop");
			emit stop : stop
			
	Plan prologFailure
			println("prolog failure")	
	
	Plan sendStart resumeLastPlan
			delay time(5000);
			emit start : start
	
			
	Plan test resumeLastPlan
			switchToPlan sendStart;
			delay time(5000);
			switchToPlan sendTakePicture;
			delay time(5000);
			switchToPlan sendStop
			
	Plan sendStop resumeLastPlan
			emit stop : stop
			
	Plan sendTakePicture resumeLastPlan
			emit takepicture : takepicture;
			switchToPlan updateRadarGui
			
	Plan updateRadarGui resumeLastPlan
			[ !? sonar( Distance, SID) ] forward gui_controller -m startRadarGui : startRadarGui(p( Distance, SID ))
		
}

QActor gui_controller context ctxControl {
	
	Plan init normal
			println("filter init")
			
}