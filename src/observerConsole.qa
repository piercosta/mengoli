System mengoli 

Event local_inputcmd : usercmd(X)   //generated by cmd actor gui-interface

Event startControl : startControl
Event stopControl : stopControl
Event mqttmsg   : mqttmsg( TOPIC,PAYLOAD )

Context ctxControl ip [ host="localhost" port=8070 ] -standalone  

Context  ctxConsole  ip [ host="localhost"  port=8039 ] 


EventHandler evh for startControl, stopControl, mqttmsg -print ;   
          
QActor console context ctxConsole {      
  	Plan init normal
 		println("Console starts");
 		actorOp initializeConsole("");
 		// per mettere un valore di return che sta in R => [ ?? actorOpDone( OP,R ) ] println( done(OP,R) ) 

//		solve consult("mqttTheory.pl") time(0) onFailSwitchTo prologFailure ;
		switchToPlan connectToMqttServer;
 		switchToPlan subscribe;
  		switchToPlan observe  
 	
 	Plan connectToMqttServer resumeLastPlan  
 		println( "CONNECTING TO MQTT " )  ;
		actorOp connect("observer_mqtt", "tcp://m2m.eclipse.org:1883", "unibo/mqtt/qacamera")   ;
		[ ?? tout(X,Y) ] switchToPlan toutExpired 
	
	Plan subscribe resumeLastPlan  
		println("SUBSCRIBE ")  ;
		actorOp subscribe("observer_mqtt", "tcp://m2m.eclipse.org:1883", "unibo/mqtt/qacamera" )
		
  	Plan observe
		println("OBSERVE ")  ;
  		receiveMsg time(3000000);
   			onMsg mqttmsg : mqttmsg(TOPIC,PAYLOAD) -> println(mqttmsg(TOPIC,PAYLOAD) ) ;
		
  		repeatPlan  
  		
 	Plan disconnectToMqttServer resumeLastPlan
 		println(observerMqtt( disconnectToMqttServer ) )  ;
		solve disconnectToMqttServer time(0) onFailSwitchTo prologFailure 
 	
 	Plan prologFailure    
		println( failure(prolog) ) 
		 
 	Plan toutExpired    
		[ ?? tout(X,Y) ] println( timeout(X,Y)  )  
 		
 }     
