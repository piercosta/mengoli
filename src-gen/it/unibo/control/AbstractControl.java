/* Generated by AN DISI Unibo */ 
package it.unibo.control;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.ActorTerminationMessage;
import it.unibo.qactors.QActorMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.contactEvent.interfaces.IEventItem;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.ActionReceiveTimed;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;


//REGENERATE AKKA: QActor instead QActorPlanned
public abstract class AbstractControl extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	//protected IMsgQueue mysupport ;  //defined in QActor
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction  action;
	
			protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
				return outEnvView;
			}
	
	
		public AbstractControl(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/control/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/control/plans.txt";
			//Plan interpretation is done in Prolog
			//if(planFilePath != null) planUtils.buildPlanTable(planFilePath);
	 	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name );
	 		initSensorSystem();
			boolean res = init();
			//println(getName() + " doJob " + res );
		} 
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/
	    public boolean init() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "init";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		if( ! planUtils.switchToPlan("waitForNumSensors").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=init WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean waitForNumSensors() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "waitForNumSensors";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		temporaryStr = "\"waiting for sensors\"";
	    		println( temporaryStr );  
	    		//senseEvent
	    		timeoutval = 600000;
	    		aar = planUtils.senseEvents( timeoutval,"numOfSonars","continue",
	    		"" , "",ActionExecMode.synch );
	    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
	    			//println("			WARNING: sense timeout");
	    			addRule("tout(senseevent,"+getName()+")");
	    			//break;
	    		}
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??msg(E,\"event\",S,none,numOfSonars(N),F)" )) != null ){
	    		temporaryStr = "numOfSonars(N)";
	    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
	    		if( ! planUtils.switchToPlan("computeSensorData").getGoon() ) break;
	    		if( ! planUtils.switchToPlan("test").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=waitForNumSensors WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean sendStart() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "sendStart";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		//delay
	    		aar = delayReactive(5000,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "sendStart";
	    		if( ! aar.getGoon() ) break;
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine, "start","start", guardVars ).toString();
	    		emit( "start", temporaryStr );
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=sendStart WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean computeSensorData() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "computeSensorData";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		//delay
	    		aar = delayReactive(1000,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "computeSensorData";
	    		if( ! aar.getGoon() ) break;
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " ??msg(E,\"event\",S,none,p(Distance,SID),N)" )) != null ){
	    		temporaryStr = "sonar(Distance,SID)";
	    		temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    		println( temporaryStr );  
	    		}
	    		temporaryStr = "\"compute data\"";
	    		println( temporaryStr );  
	    		if( planUtils.repeatPlan(8).getGoon() ) continue;
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=computeSensorData WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean test() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "test";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		if( ! planUtils.switchToPlan("sendStart").getGoon() ) break;
	    		//delay
	    		aar = delayReactive(5000,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "test";
	    		if( ! aar.getGoon() ) break;
	    		if( ! planUtils.switchToPlan("sendTakepicture").getGoon() ) break;
	    		//delay
	    		aar = delayReactive(5000,"" , "");
	    		if( aar.getInterrupted() ) curPlanInExec   = "test";
	    		if( ! aar.getGoon() ) break;
	    		if( ! planUtils.switchToPlan("sendStop").getGoon() ) break;
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=test WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean sendStop() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "sendStop";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine, "stop","stop", guardVars ).toString();
	    		emit( "stop", temporaryStr );
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=sendStop WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean sendTakepicture() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "sendTakepicture";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine, "takepicture","takepicture", guardVars ).toString();
	    		emit( "takepicture", temporaryStr );
	    		returnValue = continueWork;  
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=sendTakepicture WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	    
	 
		/* 
		* ------------------------------------------------------------
		* APPLICATION ACTIONS
		* ------------------------------------------------------------
		*/
		/* 
		* ------------------------------------------------------------
		* QUEUE  
		* ------------------------------------------------------------
		*/
		    protected void getMsgFromInputQueue(){
	//	    	println( " %%%% getMsgFromInputQueue" ); 
		    	QActorMessage msg = mysupport.getMsgFromQueue(); //blocking
	//	    	println( " %%%% getMsgFromInputQueue continues with " + msg );
		    	this.currentMessage = msg;
		    }
	  }
	
