/* Generated by AN DISI Unibo */ 
package it.unibo.gui_controller;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.ActorTerminationMessage;
import it.unibo.qactors.QActorMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.contactEvent.interfaces.IEventItem;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.ActionReceiveTimed;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;


//REGENERATE AKKA: QActor instead QActorPlanned
public abstract class AbstractGui_controller extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	//protected IMsgQueue mysupport ;  //defined in QActor
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction  action;
	
			protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
				return outEnvView;
			}
	
	
		public AbstractGui_controller(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/gui_controller/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");		
			this.planFilePath = "./srcMore/it/unibo/gui_controller/plans.txt";
			//Plan interpretation is done in Prolog
			//if(planFilePath != null) planUtils.buildPlanTable(planFilePath);
	 	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name );
	 		initSensorSystem();
			boolean res = init();
			//println(getName() + " doJob " + res );
		} 
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/
	    public boolean init() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "init";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		temporaryStr = "\"gui_controller init\"";
	    		println( temporaryStr );  
	    		if( ! planUtils.switchToPlan("waitForSonarData").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=init WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean waitForSonarData() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "waitForSonarData";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		temporaryStr = "\"waiting sonar data\"";
	    		println( temporaryStr );  
	    		//ReceiveMsg
	    		 		 aar = planUtils.receiveAMsg(mysupport,600000, "" , "" ); 	//could block
	    				if( aar.getInterrupted() ){
	    					curPlanInExec   = "playTheGame";
	    					if( ! aar.getGoon() ) break;
	    				} 			
	    				//if( ! aar.getGoon() ){
	    					//System.out.println("			WARNING: receiveMsg in " + getName() + " TOUT " + aar.getTimeRemained() + "/" +  600000);
	    					//addRule("tout(receive,"+getName()+")");
	    				//} 		 
	    				//println(getName() + " received " + aar.getResult() );
	    		temporaryStr = "\"received\"";
	    		println( temporaryStr );  
	    		//onMsg
	    		if( currentMessage.msgId().equals("startRadarGui") ){
	    			String parg="assert(guisonarpoint(Distance,SID))";
	    			/* PHead */
	    			parg =  updateVars( Term.createTerm("startRadarGui(p(Distance,SID))"), Term.createTerm("startRadarGui(p(Distance,SID))"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    				if( parg != null ) {
	    				    aar = QActorUtils.solveGoal(this,myCtx,pengine,parg,"",outEnvView,86400000);
	    					//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
	    					if( aar.getInterrupted() ){
	    						curPlanInExec   = "waitForSonarData";
	    						if( ! aar.getGoon() ) break;
	    					} 			
	    					if( aar.getResult().equals("failure")){
	    						if( ! aar.getGoon() ) break;
	    					}else if( ! aar.getGoon() ) break;
	    				}
	    		}if( ! planUtils.switchToPlan("updateLoop").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=waitForSonarData WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean updateLoop() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "updateLoop";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		if( (guardVars = QActorUtils.evalTheGuard(this, " !?guisonarpoint(Distance,SID)" )) != null ){
	    		temporaryStr = QActorUtils.unifyMsgContent(pengine, "p(Distance,SID)","p(Distance,SID)", guardVars ).toString();
	    		emit( "sonarToGui", temporaryStr );
	    		}
	    		//ReceiveMsg
	    		 		 aar = planUtils.receiveAMsg(mysupport,500, "" , "" ); 	//could block
	    				if( aar.getInterrupted() ){
	    					curPlanInExec   = "playTheGame";
	    					if( ! aar.getGoon() ) break;
	    				} 			
	    				//if( ! aar.getGoon() ){
	    					//System.out.println("			WARNING: receiveMsg in " + getName() + " TOUT " + aar.getTimeRemained() + "/" +  500);
	    					//addRule("tout(receive,"+getName()+")");
	    				//} 		 
	    				//println(getName() + " received " + aar.getResult() );
	    		//onMsg
	    		if( currentMessage.msgId().equals("stopRadarGui") ){
	    			String parg = "";
	    			/* SwitchPlan */
	    			parg =  updateVars(  Term.createTerm("stopRadarGui"), Term.createTerm("stopRadarGui"), 
	    				    		  					Term.createTerm(currentMessage.msgContent()), parg);
	    				if( parg != null ){
	    					 if( ! planUtils.switchToPlan("endLoop").getGoon() ) break; 
	    				}//else println("guard  fails");  //parg is null when there is no guard (onEvent)
	    		}else{ if( planUtils.repeatPlan(0).getGoon() ) continue;
	    		}
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=updateLoop WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    public boolean endLoop() throws Exception{	//public to allow reflection
	    try{
	    	curPlanInExec =  "endLoop";
	    	boolean returnValue = suspendWork;
	    while(true){
	    nPlanIter++;
	    		temporaryStr = "\"end loop\"";
	    		println( temporaryStr );  
	    		parg = "retract(guisonarpoint(_,_))";
	    		//tout=1 day (24 h)
	    		//aar = solveGoalReactive(parg,86400000,"","");
	    		//genCheckAar(m.name)Â»		
	    		QActorUtils.solveGoal(parg,pengine );
	    		if( ! planUtils.switchToPlan("waitForSonarData").getGoon() ) break;
	    break;
	    }//while
	    return returnValue;
	    }catch(Exception e){
	       //println( getName() + " plan=endLoop WARNING:" + e.getMessage() );
	       QActorContext.terminateQActorSystem(this); 
	       return false;  
	    }
	    }
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	    
	 
		/* 
		* ------------------------------------------------------------
		* APPLICATION ACTIONS
		* ------------------------------------------------------------
		*/
		/* 
		* ------------------------------------------------------------
		* QUEUE  
		* ------------------------------------------------------------
		*/
		    protected void getMsgFromInputQueue(){
	//	    	println( " %%%% getMsgFromInputQueue" ); 
		    	QActorMessage msg = mysupport.getMsgFromQueue(); //blocking
	//	    	println( " %%%% getMsgFromInputQueue continues with " + msg );
		    	this.currentMessage = msg;
		    }
	  }
	
